#!/usr/bin/python
"""
Automatic provides generator for Python modules.

Should be called with version of the package as argument.
"""
# Copyright 2013 Miro Hroncok <mhroncok@redhat.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
import sys, os, pkgutil, re

paths = [path.rstrip() for path in sys.stdin.readlines()]

spdirname = 'site-packages'

try:
    version = sys.argv[1]
except:
    raise Exception('Not enough arguments!')

try:
    prefix = sys.argv[2] + '-'
except IndexError:
    prefix = ''

for path in paths:
    sp = path.find('/'+spdirname+'/')
    if sp == -1: continue
    spath = os.path.join(path[:sp],spdirname)
    cdir = os.path.dirname(path)
    mother = cdir[len(spath)+1:].replace('/','.')
    lib64 = '/lib64/' in spath
    cdirs = [cdir]
    if mother != '':
        mother += '.'
        cdirs += [spath]
    
    for cd in cdirs:
        if cd == spath:
            mother = ''
        
        # Go to the given directory and add it to sys.path
        os.chdir(cd)
        
        sys.path = ['.'] + list(filter(lambda x: spdirname not in x, sys.path))

        # List all available modules in that directory
        try:
            for importer, modname, ispkg in pkgutil.walk_packages(path='.',prefix=mother):
                # if module name contains space, do not print it
                # RPM would misinterpret it
                # you should not name your modules with spaces anyway
                if ' ' in modname:
                    continue
                # if module name starts with 1 underscore, do not print it
                underscore = False
                for mod in modname.split('.'):
                    try:
                        if mod[0] == '_' and mod[1] != '_':
                            underscore = True
                            break
                    except IndexError:
                        pass
                if underscore: continue
                # if it is a directory/package, check if it's not just a namespace
                if ispkg:
                    try:
                        with open(os.path.join(spath,modname.replace('.','/'),'__init__.py'),'r') as f:
                            init_source = f.read()
                        if re.search(r'^[^#]*declare_namespace\s*\(\s*__name__\s*\)',init_source,re.M):
                            continue
                        if re.search(r'^[^#]*extend_path\s*\(\s*__path__\s*,\s*__name__\s*\)',init_source,re.M):
                            continue
                    except IOError:
                        pass
                print(prefix+'python-import('+modname+') = '+version)
                if lib64:
                    print(prefix+'python-import('+modname+')(64bit) = '+version)
        except:
            pass
